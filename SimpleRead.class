package code;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import javax.comm.CommPortIdentifier;
import javax.comm.SerialPort;

public class SimpleRead {
    private static final char[] COMMAND = new char[]{'*', 'R', 'D', 'Y', '*'};
    private static final int WIDTH = 320;
    private static final int HEIGHT = 240;
    private static CommPortIdentifier portId;
    InputStream inputStream;
    SerialPort serialPort;

    public static void main(String[] var0) {
        Enumeration var1 = CommPortIdentifier.getPortIdentifiers();

        while(var1.hasMoreElements()) {
            portId = (CommPortIdentifier)var1.nextElement();
            if (portId.getPortType() == 1) {
                System.out.println("Port name: " + portId.getName());
                if (portId.getName().equals("COM5")) {
                    new SimpleRead();
                }
            }
        }

    }

    public SimpleRead() {
        int[][] var1 = new int[240][320];
        int[][] var2 = new int[320][240];

        try {
            this.serialPort = (SerialPort)portId.open("SimpleReadApp", 1000);
            this.inputStream = this.serialPort.getInputStream();
            this.serialPort.setSerialPortParams(1000000, 8, 1, 0);
            int var3 = 0;

            while(true) {
                System.out.println("Looking for image");

                while(!this.isImageStart(this.inputStream, 0)) {
                }

                System.out.println("Found image: " + var3);

                int var4;
                int var5;
                for(var4 = 0; var4 < 240; ++var4) {
                    for(var5 = 0; var5 < 320; ++var5) {
                        int var6 = this.read(this.inputStream);
                        var1[var4][var5] = (var6 & 255) << 16 | (var6 & 255) << 8 | var6 & 255;
                    }
                }

                for(var4 = 0; var4 < 240; ++var4) {
                    for(var5 = 0; var5 < 320; ++var5) {
                        var2[var5][var4] = var1[var4][var5];
                    }
                }

                BMP var8 = new BMP();
                var8.saveBMP("c:/out/" + var3++ + ".bmp", var2);
                System.out.println("Saved image: " + var3);
            }
        } catch (Exception var7) {
            var7.printStackTrace();
        }
    }

    private int read(InputStream var1) throws IOException {
        char var2 = (char)var1.read();
        if (var2 == -1) {
            throw new IllegalStateException("Exit");
        } else {
            return var2;
        }
    }

    private boolean isImageStart(InputStream var1, int var2) throws IOException {
        if (var2 < COMMAND.length) {
            if (COMMAND[var2] == this.read(var1)) {
                ++var2;
                return this.isImageStart(var1, var2);
            } else {
                return false;
            }
        } else {
            return true;
        }
    }
}
